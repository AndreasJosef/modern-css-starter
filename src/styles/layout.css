/* ========================================================
   LAYOUT API
   Purpose: defines page rails (widths, gutters, rows, columns)
   ======================================================== */

@layer layout {

    /* 1. CONTAINERS — page rails */
    .layout__container {
        margin-inline: auto;
        padding-inline: var(--gutter);
        max-inline-size: min(100vw, var(--content-max));
    }

    .layout__container--wide {
        max-inline-size: min(100vw, var(--nav-max));
    }

    .layout__container--narrow {
        max-inline-size: min(100vw, var(--narrow-max));
    }

    /* (Add presets here if you want different gutter feels)
     Example:
     .container--tight { --gutter: clamp(.75rem, .5rem + .5vw, 2rem); }
     .container--roomy { --gutter: clamp(1.25rem, 1rem + 1vw, 6rem); } */

    /* 2. PAGE ROW PATTERNS — vertical rails */
    .layout__page-rows-2 {
        display: grid;
        grid-template-rows: auto 1fr;
        min-height: 100dvh;
    }

    .layout__page-rows-3 {
        display: grid;
        grid-template-rows: auto 1fr auto;
        min-height: 100dvh;
    }

    /* (Add presets here)
     Example: .page--tall { min-height: 120dvh; } */

    /* 3. COLUMNS — horizontal rails */
    .layout__columns {
        display: grid;
        gap: var(--columns-gap);
    }

    .columns--sidebar {
        grid-template-columns: var(--sidebar) 1fr;
        grid-template-areas: "sidebar main";
        align-items: start;
    }

    .columns--sidebar-right {
        grid-template-columns: 1fr var(--sidebar);
        grid-template-areas: "main sidebar";
        align-items: start;
    }

    .sidebar {
        grid-area: sidebar;
    }

    .main {
        grid-area: main;
    }

    @media (max-width: 700px) {

        .columns--sidebar,
        .columns--sidebar-right {
            grid-template-columns: 1fr;
            grid-template-areas:
                "main"
                "sidebar";
        }
    }

    /* (Add pattern presets here)
     Example:
     .columns--halves { grid-template-columns: 1fr 1fr; }
     .columns--thirds { grid-template-columns: 1fr 1fr 1fr; }
     .columns--golden { grid-template-columns: 0.382fr 0.618fr; }
  */

    /* 4. STACK — vertical flow inside columns */
    .layout__stack>*+* {
        margin-block-start: var(--stack-gap, var(--space-4));
    }

    /* (Presets)
     .layout--tight { --stack-gap: var(--space-2); }
     .layout--roomy { --stack-gap: var(--space-6); }
  */

    /* 5. ROWS-3 — header | fill | footer pattern */

    .layout__rows-3 {
        display: grid;
        grid-template-rows: auto 1fr auto;
        gap: var(--columns-gap);
        min-height: 0;
        /* prevent overflow in flex parents */
    }

    /* 6. CLUSTER — inline row that wraps */
    .layout__cluster {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: var(--cluster-gap, var(--space-3));
        justify-content: space-between;
    }

    /* (Presets)
     .cluster--center { justify-content: center; }
     .cluster--left   { justify-content: flex-start; }
     .cluster--right  { justify-content: flex-end; }
  */

    /* 7. GRID — responsive repeatables */
    .layout__grid {
        display: grid;
        gap: var(--grid-gap);
        grid-template-columns: repeat(auto-fit, minmax(var(--grid-min), 1fr));
    }

    /* (Presets)
     .grid--cards { --grid-min: 18rem; --grid-gap: var(--space-4); }
     .grid--tight { --grid-gap: var(--space-2); }
  */

    /* 8. SWITCHER — row ↔ column switch */
    .layout__switcher {
        display: flex;
        flex-wrap: wrap;
        gap: var(--switcher-gap);
    }

    .layout__switcher>* {
        flex-grow: 1;
        flex-basis: calc((var(--switcher-threshold) - 100%) * 999);
    }

    /* (Presets)
     .switcher--tight { --switcher-gap: var(--space-2); }
     .switcher--roomy { --switcher-gap: var(--space-6); }
  */


    /* 9. ASYMMETRIC SWITCHER: Stacked by default, two unequal cols when wide enough */
    .layout__switcher-asym {
        display: grid;
        gap: var(--switcher-gap);
        grid-template-columns: 1fr;
        align-items: center;
    }

    /* Local container query enables per-section thresholds */
    .layout__switcher-asym {
        container-type: inline-size;
    }

    @container (min-width: var(--switcher-asym)) {
        .layout__switcher-asym {
            grid-template-columns:
                minmax(var(--switcher-text-min), var(--switcher-text-max)) minmax(var(--switcher-media-min), 1fr);
            grid-template-areas: "left right";
        }

        .switcher__left {
            grid-area: left;
        }

        .switcher__right {
            grid-area: right;
        }
    }

    /* flipped version */
    @container (min-width: var(--switcher-asym)) {
        .layout__switcher-asym.switcher--flip {
            grid-template-areas: "right left";
        }
    }
}